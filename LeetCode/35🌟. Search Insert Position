Link : https://leetcode.com/problems/search-insert-position/

Approach : Binary Search + STL

other approach:https://leetcode.com/problems/search-insert-position/discuss/15101/C%2B%2B-O(logn)-Binary-Search-that-handles-duplicate

My code time : 00ms
Space : 9.6 mb
My Code :
class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        int l=0,mid=0,r =nums.size()-1;
        while(l<=r){
            mid = (l+r)>>1;
            if(nums[mid]==target){
                return mid;
            }else if(nums[mid]<target){
                l=mid+1;
            }else{r=mid-1;}
        }
        // if(target>*(nums.end()-1)){return nums.size();}
        // else{return mid;}
        if(target>nums[nums.size()-1]){
            return nums.size();
        }else if(target<nums[0]){return 0;}
        else{return (lower_bound(nums.begin(),nums.end(),target)-nums.begin());}
    }
};

